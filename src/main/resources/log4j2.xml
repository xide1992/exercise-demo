<?xml version="1.0" encoding="UTF-8" ?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，status用来指定log4j本身的打印日志的级别.
可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数,单位是s,最小是5s-->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<Configuration status="OFF" monitorInterval="1800">
    <!--全局属性-->
    <Properties>
        <!--${sys:catalina.home} 指向tomcat安装目录-->
        <Property name="catalinapath">${sys:catalina.base}/logs</Property>
        <Property name="logpath">D:\NewJavaProject\exercise-demo\logs</Property>
        <Property name="APP_NAME">exercise-demo</Property>
        <!--设置日志文件存储路径为tomcat/logs/${APP_NAME}-->
        <Property name="LOG_FILE_PATH">${sys:catalina.home}/logs/${APP_NAME}</Property>
        <!--设置日志输出格式-->
        <Property name="PATTERN_FORMAT">%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n</Property>
    </Properties>

    <!--配置输出源-->
    <Appenders>
        <!-- 控制台输出 -->
        <Console name="STDOUT" target="SYSTEM_OUT">
            <!--<PatternLayout pattern="%d %p [%c] - %m%n" />-->
            <PatternLayout pattern="${PATTERN_FORMAT}"/>
        </Console>

        <!-- 系统启动日志输出文件 -->
        <RollingRandomAccessFile name="systemAppender"
                                 fileName="${catalinapath}/system/system.log"
                                 filePattern="${catalinapath}/system/system-%d{yyyy-MM-dd}.log">
            <PatternLayout pattern="%d %p [%c] - %m%n" />
            <Filters>
                <ThresholdFilter level="INFO"/>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
        </RollingRandomAccessFile>

        <!--  日志, info级别及以上日志接收器 -->
        <RollingRandomAccessFile name="commonInfoLogInfoAppender"
                                 fileName="${logpath}/info.log"
                                 filePattern="${logpath}/info-%d{yyyy-MM-dd}.log">
            <Filters>
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %p%m%n" />
            <Policies>
                <TimeBasedTriggeringPolicy />
                <SizeBasedTriggeringPolicy size="10 MB" />
            </Policies>
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>

        <!--  日志, warn级别及以上日志接收器 -->
        <RollingRandomAccessFile name="commonWarnLogInfoAppender"
                                 fileName="${logpath}/warn.log"
                                 filePattern="${logpath}/warn-%d{yyyy-MM-dd}.log">
            <Filters>
                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %p%m%n" />
            <Policies>
                <TimeBasedTriggeringPolicy />
                <SizeBasedTriggeringPolicy size="10 MB" />
            </Policies>
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>

        <!--  日志, error级别及以上日志接收器 -->
        <RollingRandomAccessFile name="commonErrorLogInfoAppender"
                                 fileName="${logpath}/error.log"
                                 filePattern="${logpath}/error-%d{yyyy-MM-dd}.log">
            <Filters>
                <ThresholdFilter level="ERROR"/>
                <ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %p%m%n" />
            <Policies>
                <TimeBasedTriggeringPolicy />
                <SizeBasedTriggeringPolicy size="10 MB" />
            </Policies>
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>

    </Appenders>
    <Loggers>

        <!--Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出-->
        <!--level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < AppenderRef：
        Root的子节点，用来指定该日志输出到哪个Appender-->
        <Root level="INFO" >
            <AppenderRef ref="STDOUT"/>
            <AppenderRef ref="systemAppender"/>
        </Root>

        <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
        <!--name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点-->
        <!--AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,
        如果没有指定，就会默认继承自Root.
        如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，
        此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。-->
        <Logger name="infoLog" level="info" additivity="false">
            <AppenderRef ref="commonInfoLogInfoAppender"/>
        </Logger>

        <Logger name="warmLog" level="info" additivity="false">
            <AppenderRef ref="commonWarnLogInfoAppender"/>
        </Logger>

        <Logger name="errorLog" level="info" additivity="false">
            <AppenderRef ref="commonErrorLogInfoAppender"/>
        </Logger>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"></logger>
        <logger name="org.mybatis" level="INFO"></logger>
    </Loggers>
</Configuration>